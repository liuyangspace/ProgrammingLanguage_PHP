
SAPI(Server Application Programming Interface)

1, SAPI实现 (php-src/sapi/)
    cli
    fpm
    CGI/FASTCGI
    Apache
    embed ( 嵌入式 )
    ...

2, SAPI 结构
    cgi_sapi_module.startup(&cgi_sapi_module)           //  cgi模式 cgi/cgi_main.c文件
    apache2_sapi_module.startup(&apache2_sapi_module);  //  apache2服务器  apache2handler/sapi_apache2.c文件
    struct _sapi_module_struct {
        char *name;         //  名字（标识用）
        char *pretty_name;  //  更好理解的名字（自己翻译的）

        int (*startup)(struct _sapi_module_struct *sapi_module);    //  启动函数,SAPI初始化时调用,服务器处理多个请求时，该函数只会调用一次。
        int (*shutdown)(struct _sapi_module_struct *sapi_module);   //  关闭方法,释放所有的SAPI的数据结构、内存等。

        int (*activate)(TSRMLS_D);      // 激活, 此函数会在每个请求开始时调用，它会再次初始化每个请求前的数据结构。
        int (*deactivate)(TSRMLS_D);    // 停用, 此函数会在每个请求结束时调用，它用来确保所有的数据都，以及释放在activate中初始化的数据结构。

        int (*ub_write)(const char *str, unsigned int str_length TSRMLS_DC); //  不缓存的写操作(unbuffered write),将PHP的数据输出给客户端
            // 在CLI模式下，其最终是调用fwrite实现向标准输出输出内容；在Apache模块中，它最终是调用Apache提供的方法rwrite。
        void (*flush)(void *server_context);    //  flush 刷新输出，
            // 在CLI模式下通过使用C语言的库函数fflush实现，在php_mode5模式下，使用Apache的提供的函数函数rflush实现。
        struct stat *(*get_stat)(TSRMLS_D);     //  get uid
        char *(*getenv)(char *name, size_t name_len TSRMLS_DC); //  getenv
        void (*sapi_error)(int type, const char *error_msg, ...);   // 报告错误用，大多数的SAPI都是使用的PHP的默认实现php_error。
        int (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC);   /* header handler */
         /* send headers handler */
        int (*send_headers)(sapi_headers_struct *sapi_headers TSRMLS_DC);
        void (*send_header)(sapi_header_struct *sapi_header, void *server_context TSRMLS_DC);   // 发送头部信息，
            // 此方法一般的SAPI都会定制，其所不同的是，有些的会调服务器自带的（如Apache），有些的需要你自己实现（如 FastCGI）。
        int (*read_post)(char *buffer, uint count_bytes TSRMLS_DC); // 在SAPI激活时调用，它与请求的方法相关，
            // 当请求的方法是POST时，程序会操作$_POST、$HTTP_RAW_POST_DATA等变量。
        char *(*read_cookies)(TSRMLS_D);    // 在SAPI激活时，程序会调用此函数，并且将此函数获取的值赋值给SG(request_info).cookie_data。
            // 在CLI模式下，此函数会返回NULL。
        /* register server variables */
        void (*register_server_variables)(zval *track_vars_array TSRMLS_DC);

        void (*log_message)(char *message);     /* Log message */
        time_t (*get_request_time)(TSRMLS_D);   /* Request Time */
        void (*terminate_process)(TSRMLS_D);    /* Child Terminate */

        char *php_ini_path_override;    //  覆盖的ini路径
        ...
    };

3 Apache SAPI
    # Apache通过LoadModule命令加载mod_php5模块，在Apache的配置文件httpd.conf中添加一行：
        LoadModule php5_module modules/mod_php5.so
    # Apache2的mod_php5模块包括sapi/apache2handler和sapi/apache2filter两个目录在apache2_handle/mod_php5.c文件中，模块定义的相关代码如下：
        /** Use this in all standard modules */
        #define STANDARD20_MODULE_STUFF MODULE_MAGIC_NUMBER_MAJOR, \
                        MODULE_MAGIC_NUMBER_MINOR, \
                        -1, \
                        __FILE__, \
                        NULL, \
                        NULL, \
                        MODULE_MAGIC_COOKIE, \
                                        NULL      /* rewrite args spot */
        AP_MODULE_DECLARE_DATA module php5_module = {
            STANDARD20_MODULE_STUFF,/* 宏，包括版本，小版本，模块索引，模块名，下一个模块指针等信息，其中模块名以__FILE__体现 */
            create_php_config,      /* create per-directory config structure */
            merge_php_config,       /* merge per-directory config structures */
            NULL,                   /* create per-server config structure */
            NULL,                   /* merge per-server config structures */
            php_dir_cmds,           /* 模块定义的所有的指令 */
            php_ap2_register_hook   /* 注册钩子，此函数通过ap_hoo_开头的函数在一次请求处理过程中对于指定的步骤注册钩子 */
        };
    # Apache的module结构定义如下：
        typedef struct module_struct module;
        struct module_struct {
            int version;
            int minor_version;
            int module_index;
            const char *name;
            void *dynamic_load_handle;
            struct module_struct *next;
            unsigned long magic;
            void (*rewrite_args) (process_rec *process);
            void *(*create_dir_config) (apr_pool_t *p, char *dir);
            void *(*merge_dir_config) (apr_pool_t *p, void *base_conf, void *new_conf);
            void *(*create_server_config) (apr_pool_t *p, server_rec *s);
            void *(*merge_server_config) (apr_pool_t *p, void *base_conf, void *new_conf);
            const command_rec *cmds;
            void (*register_hooks) (apr_pool_t *p);
        }
    # Apache遇到指令的时候将逐一遍历各个模块中的指令表，若找到相关指令，则调用相应的处理函数，以下是mod_php5模块定义的指令表：
        const command_rec php_dir_cmds[] = {
            AP_INIT_TAKE2("php_value", php_apache_value_handler, NULL, OR_OPTIONS, "PHP Value Modifier"),
            AP_INIT_TAKE2("php_flag", php_apache_flag_handler, NULL, OR_OPTIONS, "PHP Flag Modifier"),
            AP_INIT_TAKE2("php_admin_value", php_apache_admin_value_handler, NULL, ACCESS_CONF|RSRC_CONF, "PHP Value Modifier (Admin)"),
            AP_INIT_TAKE2("php_admin_flag", php_apache_admin_flag_handler, NULL, ACCESS_CONF|RSRC_CONF, "PHP Flag Modifier (Admin)"),
            AP_INIT_TAKE1("PHPINIDir", php_apache_phpini_set, NULL, RSRC_CONF, "Directory containing the php.ini file"),
            {NULL}
        };
    # mod_php5定义了属于Apache的sapi_module_struct结构:
        static sapi_module_struct apache2_sapi_module = { // php5.6: apache_sapi_module =
            "apache2handler",
            "Apache 2.0 Handler",
            php_apache2_startup,                    /* startup */
            php_module_shutdown_wrapper,            /* shutdown */
            NULL,                                   /* activate */
            NULL,                                   /* deactivate */
            php_apache_sapi_ub_write,               /* unbuffered write */
            php_apache_sapi_flush,                  /* flush */
            php_apache_sapi_get_stat,               /* get uid */
            php_apache_sapi_getenv,                 /* getenv */
            php_error,                              /* error handler */
            php_apache_sapi_header_handler,         /* header handler */
            php_apache_sapi_send_headers,           /* send headers handler */
            NULL,                                   /* send header handler */
            php_apache_sapi_read_post,              /* read POST data */
            php_apache_sapi_read_cookies,           /* read Cookies ,php5.6: sapi_apache_read_cookies*/
            php_apache_sapi_register_variables,
            php_apache_sapi_log_message,            /* Log message */
            php_apache_sapi_get_request_time,       /* Request Time */
            NULL,                                   /* Child Terminate */
            STANDARD_SAPI_MODULE_PROPERTIES
        };
    # 这些方法都专属于Apache服务器。以读取cookie为例，当我们在Apache服务器环境下，在PHP中调用读取Cookie时，最终获取的数据的位置是在激活SAPI时。它所调用的方法是read_cookies。
        SG(request_info).cookie_data = sapi_module.read_cookies(TSRMLS_C); // php_apache_sapi_read_cookies(TSRMLS_C)；

4, FastCGI SAPI
    # PHP的CGI实现了Fastcgi协议，是一个TCP或UDP协议的服务器接受来自Web服务器的请求.TCP的服务端，一般会执行这样几个操作步骤：
        调用socket函数创建一个TCP用的流式套接字；
        调用bind函数将服务器的本地地址与前面创建的套接字绑定；
        调用listen函数将新创建的套接字作为监听，等待客户端发起的连接，当客户端有多个连接连接到这个套接字时，可能需要排队处理；
        服务器进程调用accept函数进入阻塞状态，直到有客户进程调用connect函数而建立起一个连接；
        当与客户端创建连接后，服务器调用read_stream函数读取客户的请求；
        处理完数据后，服务器调用write函数向客户端发送应答。
    # PHP的CGI实现从cgi_main.c文件的main函数开始，在main函数中调用了定义在fastcgi.c文件中的初始化，监听等函数。
    # FastCGI sapi_module_struct结构：
        static sapi_module_struct cgi_sapi_module = {
            "cgi-fcgi",                     /* name */
            "CGI/FastCGI",                  /* pretty name */
            php_cgi_startup,                /* startup */
            php_module_shutdown_wrapper,    /* shutdown */
            sapi_cgi_activate,              /* activate */
            sapi_cgi_deactivate,            /* deactivate */
            sapi_cgibin_ub_write,           /* unbuffered write */
            sapi_cgibin_flush,              /* flush */
            NULL,                           /* get uid */
            sapi_cgibin_getenv,             /* getenv */
            php_error,                      /* error handler */
            NULL,                           /* header handler */
            sapi_cgi_send_headers,          /* send headers handler */
            NULL,                           /* send header handler */
            sapi_cgi_read_post,             /* read POST data */
            sapi_cgi_read_cookies,          /* read Cookies */
            sapi_cgi_register_variables,    /* register server variables */
            sapi_cgi_log_message,           /* Log message */
            NULL,                           /* Get request time */
            NULL,                           /* Child terminate */
            STANDARD_SAPI_MODULE_PROPERTIES
        };

















