home:
    http://laravel-admin.org/
    http://laravel-admin.org/docs/
    http://z-song.github.io/laravel-admin/

1,install
    1.1 composer
        Laravel 5.1, 已经不维护了
        composer require encore/laravel-admin "1.1.*"
        Laravel 5.2
        composer require encore/laravel-admin "1.2.*"
        Laravel 5.3
        composer require encore/laravel-admin "1.3.*"
        Laravel 5.4
        composer require encore/laravel-admin "1.4.*"
    1.2 ServiceProvider(config/app.php => ServiceProvider)
        Encore\Admin\Providers\AdminServiceProvider::class
    1.3 command
        php artisan vendor:publish --tag=laravel-admin
        php artisan admin:install

2,make controller
    1,controller
        php artisan admin:make UserController --model=App\\User

3,list
    3.1,base
        $grid = Admin::grid(Movie::class, function(Grid $grid){
            $grid->id('ID')->sortable();// 第一列显示id字段，并将这一列设置为可排序列
            $grid->column('title');// 第二列显示title字段，由于title字段名和Grid对象的title方法冲突，所以用Grid的column()方法代替
            $grid->director()->display(function($userId) { return User::find($userId)->name; });// 第三列显示director字段，通过display($callback)方法设置这一列的显示内容为users表中对应的用户名
            $grid->describe();// 第四列显示为describe字段
            $grid->rate();// 第五列显示为rate字段
            $grid->released('上映?')->display(function ($released) {  return $released ? '是' : '否';});// 第六列显示released字段，通过display($callback)方法来格式化显示输出
            // 下面为三个时间字段的列显示
            $grid->release_at();
            $grid->created_at();
            $grid->updated_at();
            // filter($callback)方法用来设置表格的简单搜索框
            $grid->filter(function ($filter) {
                // 设置created_at字段的范围查询
                $filter->between('created_at', 'Created Time')->datetime();
            });
        });
    3.2,filter
        $grid->filter(function($filter){
            $filter->useModal();// 如果过滤器太多，可以使用弹出模态框来显示过滤器.
            $filter->disableIdFilter();// 禁用id查询框
            $filter->like('name', 'name');// sql: ... WHERE `user.name` LIKE "%$name%";
            $filter->is('emial', 'Email');// sql: ... WHERE `user.email` = $email;
            $filter->between('created_at', 'Created Time')->datetime();// sql: ... WHERE `user.created_at` BETWEEN $start AND $end;
            $filter->is('author_id', 'Author')->select(User::all()->pluck('name', 'id'));// sql: ... WHERE `article.author_id` = $id;
            $filter->where(function ($query) {
                $query->where('title', 'like', "%{$this->input}%")->orWhere('content', 'like', "%{$this->input}%");
            }, 'Text');// sql: ... WHERE `title` LIKE "%$input" OR `content` LIKE "%$input";
            $filter->where(function ($query) {
                $query->whereRaw("`rate` >= 6 AND `created_at` = {$this->input}");
            }, 'Text');// sql: ... WHERE `rate` >= 6 AND `created_at` = {$input};
            $filter->where(function ($query) {
                $input = $this->input;
                $query->whereHas('profile', function ($query) use ($input) {
                    $query->where('address', 'like', "%{$input}%")->orWhere('email', 'like', "%{$input}%");
                });
            }, '地址或手机号');// 关系查询，查询对应关系`profile`的字段
        });
    3.3,列表字段操作
        $grid->username('用户名');// 直接通过字段名`username`添加列
        $grid->column('username', '用户名');// 效果和上面一样
        $grid->columns('email', 'username' ...);// 添加多列
        $grid->model()->where('id', '>', 100);
        $grid->model()->orderBy('id', 'desc');
        $grid->model()->take(100);
        $grid->paginate(15);// 默认为每页20条
        $grid->disableCreation();//禁用创建按钮
        $grid->disablePagination();//禁用分页条
        $grid->disableFilter();//禁用查询过滤器
        $grid->disableExport();//禁用导出数据按钮
        $grid->perPages([10, 20, 30, 40, 50]);//设置分页选择器选项
    3.4,自定义字段显示
        $grid->text()->display(function($text) { return str_limit($text, 30, '...'); });
        $grid->name()->display(function ($name) { return "<span class='label'>$name</span>"; });
        $grid->email()->display(function ($email) { return "mailto:$email"; });
        // 添加不存在的字段
        $grid->column('column_not_in_table')->display(function () { return 'blablabla....'; });
    3.5,关系
        3.5.1,一对一
            #model
            class User extends Model { public function profile(){ $this->hasOne(Profile::class); } }
            class Profile extends Model { public function user() { $this->belongsTo(User::class); } }
            #list
            Admin::grid(User::class, function (Grid $grid) {
                $grid->column('profile.age');//or
                $grid->profile()->gender();
            });
        3.5.2,一对多
            #model
            class Post extends Model { public function comments() { return $this->hasMany(Comment::class); } }
            class Comment extends Model { public function post() { return $this->belongsTo(Post::class); } }
            #list
            return Admin::grid(Post::class, function (Grid $grid) {
                $grid->comments('评论数')->display(function ($comments) {
                    $count = count($comments);
                    return "<span class='label label-warning'>{$count}</span>";
                });
            });
            return Admin::grid(Comment::class, function (Grid $grid) {
                $grid->post()->title();
            });
        3.5.3,多对多
            #model
            class User extends Model { public function roles() { return $this->belongsToMany(Role::class); } }
            class Role extends Model { public function users() { return $this->belongsToMany(User::class); } }
            #list
            return Admin::grid(User::class, function (Grid $grid) {
                $grid->roles()->display(function ($roles) {
                    $roles = array_map(function ($role) {
                        return "<span class='label label-success'>{$role['name']}</span>";
                    }, $roles);
                    return join('&nbsp;', $roles);
                });
            });
    3.6,行
        #可以通过传入的$actions参数来获取当前行的数据：
        $grid->actions(function ($actions) {
            $actions->disableDelete();// 关闭删除
            $actions->disableEdit();// 关闭编辑
            $actions->row;// 当前行的数据数组
            $actions->getKey();// 获取当前行主键值
            $actions->append('<a href=""><i class="fa fa-eye"></i></a>');// append一个操作
            $actions->prepend('<a href=""><i class="fa fa-paper-plane"></i></a>');// prepend一个操作
        });
        #自定义操作
            #先定义操作类
            namespace App\Admin\Extensions;
            use Encore\Admin\Admin;
            class CheckRow
            {
                protected $id;
                public function __construct($id)
                {
                    $this->id = $id;
                }
                protected function script()
                {
                    return <<<SCRIPT
            $('.grid-check-row').on('click', function () {
                console.log($(this).data('id'));// Your code.
            });
            SCRIPT;
                }
                protected function render()
                {
                    Admin::script($this->script());
                    return "<a class='btn btn-xs btn-success fa fa-check grid-check-row' data-id='{$this->id}'></a>";
                }
                public function __toString()
                {
                    return $this->render();
                }
            }
            #然后添加操作
            $grid->actions(function ($actions) {
                $actions->append(new CheckRow($actions->getKey()));// 添加操作
            }
    3.6,列
        #内建方法（http://z-song.github.io/laravel-admin/#/en/model-grid-column?id=built-in-methods）
        3.6.1,editable
        3.6.2,switch
        3.6.3,switchGroup
        3.6.4,select
        3.6.5,radio
        3.6.6,checkbox
        3.6.7,image
        3.6.8,label
        3.6.9,badge
        3.6.10,Extend the column // 自定义列显示，操作
            #Add following code to app/Admin/bootstrap.php
                use Encore\Admin\Grid\Column;
                Column::extend('color', function ($value, $color) { return "<span style='color: $color'>$value</span>"; });
            #Use this extension in model-grid:
                $grid->title()->color('#ccc');
            #If the column display logic is more complex, can implements with a extension class.
                namespace App\Admin\Extensions;
                use Encore\Admin\Admin;
                use Encore\Admin\Grid\Displayers\AbstractDisplayer;
                class Popover extends AbstractDisplayer
                {
                    public function display($placement = 'left')
                    {
                        Admin::script("$('[data-toggle=\"popover\"]').popover()");
                        return <<<EOT
                <button type="button" class="btn btn-secondary" title="popover" data-container="body" data-toggle="popover"
                    data-placement="$placement" data-content="{$this->value}" > Popover </button>
                EOT;
                    }
                }
            #And then redister extension in app/Admin/bootstrap.php：
             Column::extend('popover', Popover::class);
            #Use the extension in model-grid
             $grid->desciption()->popover('right');
        3.6.11,helpers:
            String operations: Illuminate\Support\Str, e.g.:$grid->title()->limit(30)->ucfirst()->substr(1, 10);
            Array operations: Illuminate\Support\Collection, e.g.:$grid->tags()->pluck('name')->map('ucwords')->implode('-');
            Mixed use: e.g.:$grid->images()->display(function ($images) { return json_decode($images, true); })->map(function ($path) { return 'http://localhost/images/'. $path; })->image();
        3.6.12,Custom tools(http://z-song.github.io/laravel-admin/#/en/model-grid-custom-tools):
            selector :
            Batch operation :
            Custom export :

4,form
    4.1,base(http://z-song.github.io/laravel-admin/#/en/model-form-fields?id=basic-usage)
        Admin::form(Movie::class, function (Form $form) {
            $form->display('id', 'ID');             // Displays the record id
            $form->text('title', 'Movie title');    // Add an input box of type text
            $form->select('director', 'Director')->options([ 'John'  => 1, 'Smith' => 2, 'Kate'  => 3, ]);
            $form->multipleSelect('director', 'Director')->options([ 'John'  => 1, 'Smith' => 2, 'Kate'  => 3, ]);
            $form->textarea('describe', 'Describe');// Add textarea for the describe field
            $form->number('rate', 'Rate');          // Number input
            $form->switch('released', 'Released?'); // Add a switch field
            $form->radio($column[, $label])->options(['m' => 'Female', 'f'=> 'Male'])->default('m');
            $form->checkbox($column[, $label])->options([1 => 'foo', 2 => 'bar', 'val' => 'Option name']);
            $form->email($column[, $label]);
            $form->password($column[, $label]);
            $form->url($column[, $label]);
            $form->ip($column[, $label]);
            $form->mobile($column[, $label])->format('999 9999 9999');
            $form->color($column[, $label])->default('#ccc');
            $form->time($column[, $label])->format('HH:mm:ss');
            $form->date($column[, $label])->format('YYYY-MM-DD');
            $form->datetime($column[, $label])->format('YYYY-MM-DD HH:mm:ss');
            $form->timeRange($startTime, $endTime, 'Time Range');
            $form->dateRange($startDate, $endDate, 'Date Range');
            $form->datetimeRange($startDateTime, $endDateTime, 'DateTime Range');
            $form->currency($column[, $label])->symbol('￥');
            $form->rate($column[, $label]);
            $form->dateTime('release_at', 'release time');// Add a date and time selection box
            // map
            $form->map($latitude, $longitude, $label);
            $form->map($latitude, $longitude, $label)->useTencentMap();// Use Tencent map
            $form->map($latitude, $longitude, $label)->useGoogleMap();// Use google map
            //
            $form->slider($column[, $label])->options(['max' => 100, 'min' => 1, 'step' => 1, 'postfix' => 'years old']);
            $form->editor($column[, $label]);
            $form->hidden($column);
            $form->switch($column[, $label])->states([
                'on'  => ['value' => 1, 'text' => 'enable', 'color' => 'success'],
                'off' => ['value' => 0, 'text' => 'disable', 'color' => 'danger'], ];);
            $form->display($column[, $label]);
            $form->divide();
            $form->html('html contents');
            $form->tags('keywords');
            $form->icon('icon');
            $form->hasMany('paintings', function (Form\NestedForm $form) {
                $form->text('title'); $form->image('body'); $form->datetime('completed_at'); });
            $form->embeds('extra', function ($form) {
                $form->text('extra1')->rules('required'); });
            // Other methods
            $form->disableSubmit();
            $form->disableReset();
            $form->ignore('column1', 'column2', 'column3');
        });
    4.2,Custom tools
        $form->tools(function (Form\Tools $tools) {
            $tools->disableBackButton();// Disable back btn.
            $tools->disableListButton();// Disable list btn
            // Add a button, the argument can be a string, or an instance of the object that implements the Renderable or Htmlable interface
            $tools->add('<a class="btn btn-sm btn-danger"><i class="fa fa-trash"></i>&nbsp;&nbsp;delete</a>');
        });
    4.3,File/Image upload
        # add storage configuration : config/admin.php
            'upload'  => [
                'disk' => 'admin',      //
                'directory'  => [
                    'image'  => 'image',    //directory.image and directory.file is the upload path for $form->image($column) and $form->file($column)
                    'file'   => 'file',
                ],
                'host' => 'http://localhost:8000/upload/',  //host is url prefix for your uploaded files.
            ],
        $form->file('file_column');
        $form->image('image_column');
        $form->image('picture')->move('public/upload/image1/');// change upload path
        $form->image('picture')->uniqueName();// use a unique name (md5(uniqid()).extension)
        $form->image('picture')->name(function ($file) { return 'test.'.$file->guessExtension(); });// specify filename
        $form->image($column[, $label]);
        $form->image($column[, $label])->move($dir, $name);// Modify the image upload path and file name
        $form->image($column[, $label])->crop(int $width, int $height, [int $x, int $y]);// Crop picture
        $form->image($column[, $label])->insert($watermark, 'center');// Add a watermark
        $form->file($column[, $label]);
        $form->file($column[, $label])->move($dir, $name); // Modify the file upload path and file name
        $form->file($column[, $label])->rules('mimes:doc,docx,xlsx');// And set the upload file type
        $form->multipleImage($column[, $label]);// multiple image
        $form->multipleFile($column[, $label]);// multiple file
        # define a mutator for the column in model mutator : setPicturesAttribute/getPicturesAttribute
    4.4,form fields
        4.5.1,Public methods:
            (1)validation rules: $form->text('title')->rules('required|min:3');
            (2)the value to save: $form->text('title')->value('text...');
            (3)default value: $form->text('title')->default('text...');
            (4)help message: $form->text('title')->help('help...');
            (5)attributes of field element: $form->text('title')->attribute(['data-title' => 'title...']);
                                         $form->text('title')->attribute('data-title', 'title...');
            (6)Set placeholder: $form->text('title')->placeholder('Please input...');
            (7)model-form-tab:
                $form->tab('Basic info', function ($form) {
                    $form->text('username');
                    $form->email('email');
                })->tab('Profile', function ($form) {
                   $form->image('avatar');
                   $form->text('address');
                   $form->mobile('phone');
                })->tab('Jobs', function ($form) {
                     $form->hasMany('jobs', function () {
                         $form->text('company');
                         $form->date('start_date');
                         $form->date('end_date');
                     });
                  })
    4.5,Fields management
        4.5.1,Remove field(in  the file app/Admin/bootstrap.php)
            use Encore\Admin\Form;
            Form::forget(['map', 'editor']);
        4.5.2,Extend the custom field(http://z-song.github.io/laravel-admin/#/en/model-form-field-management)
            (1)Create a new field class app/Admin/Extensions/PHPEditor.php:
                namespace App\Admin\Extensions;
                use Encore\Admin\Form\Field;
                class PHPEditor extends Field
                {
                    protected $view = 'admin.php-editor';
                    protected static $css = [ '/packages/codemirror-5.20.2/lib/codemirror.css', ];
                    protected static $js = [ '/packages/codemirror-5.20.2/lib/codemirror.js','//cdn.ckeditor.com/4.5.10/standard/ckeditor.js', ];
                    public function render()
                    {
                        $this->script = <<<EOT
                CodeMirror.fromTextArea(document.getElementById("{$this->id}"), {
                    lineNumbers: true,
                    mode: "text/x-php",
                    extraKeys: { "Tab": function(cm){ cm.replaceSelection("    " , "end"); } }
                });
                EOT;
                        return parent::render();
                    }
                }
            (2)Create a view file resources/views/admin/php-editor.blade.php:
                <div class="form-group {!! !$errors->has($label) ?: 'has-error' !!}">
                    <label for="{{$id}}" class="col-sm-2 control-label">{{$label}}</label>
                    <div class="col-sm-6">
                        @include('admin::form.error')
                        <textarea class="form-control" id="{{$id}}" name="{{$name}}" placeholder="{{ trans('admin::lang.input') }} {{$label}}" {!! $attributes !!} >{{ old($column, $value) }}</textarea>
                    </div>
                </div>
            (3)Finally, find the file app/Admin/bootstrap.php:
                use App\Admin\Extensions\PHPEditor;
                use Encore\Admin\Form;
                Form::extend('php', PHPEditor::class);
            (4)And then you can use:
                $form->php('code');
            other:Integrate CKEditor(http://z-song.github.io/laravel-admin/#/en/model-form-field-management)
    4.6,Model form callback
        $form->saving(function (Form $form) { //...; });// callback before save
        $form->saved(function (Form $form) {
            return response('xxxx'); // returns a simple response
            return redirect('/admin/users'); // redirect url
            throw new \Exception('Error friends. . .'); // throws an exception
            // redirect back with an error message
            $error = new MessageBag([
                    'title'   => 'title...',
                    'message' => 'message....', ]);
            return back()->with(compact('error'));
            // redirect back with a successful message
            $success = new MessageBag([
                    'title'   => 'title...',
                    'message' => 'message....', ]);
            return back()->with(compact('success'));
        });// callback after save

5,Model-tree
    5.1,in model
        namespace App\Models\Demo;
        use Encore\Admin\Traits\AdminBuilder;
        use Encore\Admin\Traits\ModelTree;
        use Illuminate\Database\Eloquent\Model;
        class Category extends Model
        {
            use ModelTree, AdminBuilder;
            protected $table = 'demo_categories';
        }
    5.2,use model-tree
        class CategoryController extends Controller
        {
            use ModelForm;
            public function index()
            {
                return Admin::content(function (Content $content) {
                    $content->header('Categories');
                    $content->body(Category::tree(
                        // modify the display
                        $tree->branch(function ($branch) {
                                $src = config('admin.upload.host') . '/' . $branch['logo'] ;
                                $logo = "<img src='$src' style='max-width:30px;max-height:30px' class='img'/>";
                                return "{$branch['id']} - {$branch['title']} $logo";
                        });
                        // modify the query
                        $tree->query(function ($model) {
                                return $model->where('type', 1);
                        });
                    ));
                });
            }
        }

6,Layout
    6.1,Encore\Admin\Layout\Content::row(Illuminate\Contracts\Support\Renderable $element)
        $content->row('One line of text');// Add text
        $content->row(new Box('title', 'xxxx'));// Add a component
    6.2,Encore\Admin\Layout\Row::column($width, Illuminate\Contracts\Support\Renderable $element)
        $content->row(function(Row $row) {
            $row->column(4, 'xxx');// Add columns in the row
        });

7,Web widgets
    7.1,Box Encore\Admin\Widgets\Box
        $box = new Box('Box Title', 'Box content');
        $box->title('title');   //Box::title($title) method is used to set the Box component title.
        $box->removable();      //Box::content($content) method is used to set the content element of a Box component.
        $box->collapsable();    //Box::removable() method sets the Box component as removable.
        $box->style('info');    //Box::collapsable() method sets the Box component as collapsable.
        $box->solid();          //Box::style($style) method sets the style of the Box component to fill in primary,info, danger,warning, success,default.
        echo $box;              //Box::solid() method adds a border to the Box component.
    7.2,Collapse Encore\Admin\Widgets\Collapse
        $collapse = new Collapse();
        $collapse->add('Bar', 'xxxxx');//Collapse::add($title, $content)
        $collapse->add('Orders', new Table());
        echo $collapse->render();
    7.3,Form Encore\Admin\Widgets\Form
        $form = new Form();             //Form::__construct($data = []) generates a form object. If the $data parameter is passed, the elements in the$data array will be filled into the form.
        $form->action('example');       //Form::action($uri) method is used to set the form submission address.
        $form->email('email')->default('qwe@aweq.com');
        $form->password('password');
        $form->text('name');
        $form->url('url');
        $form->color('color');
        $form->map('lat', 'lng');
        $form->date('date');
        $form->json('val');
        $form->dateRange('created_at', 'updated_at');
        echo $form->render();
        //Form::method($method) method is used to set the submit method of the form form, the default is POST method.
        //Form::disablePjax() disable pjax for form submit.
    7.4,Infobox Encore\Admin\Widgets\InfoBox
        $infoBox = new InfoBox('New Users', 'users', 'aqua', '/admin/users', '1024');
        echo $infoBox->render();
    7.5,Tab component  Encore\Admin\Widgets\Tab
        $tab = new Tab();
        $tab->add('Pie', $pie);
        $tab->add('Table', new Table());
        $tab->add('Text', 'blablablabla....');
        echo $tab->render();
    7.6,Table Encore\Admin\Widgets\Table
        $headers = ['Id', 'Email', 'Name', 'Company'];
        $rows = [
            [1, 'labore21@yahoo.com', 'Ms. Clotilde Gibson', 'Goodwin-Watsica'],
            [2, 'omnis.in@hotmail.com', 'Allie Kuhic', 'Murphy, Koepp and Morar'],
            [3, 'quia65@hotmail.com', 'Prof. Drew Heller', 'Kihn LLC'],
            [4, 'xet@yahoo.com', 'William Koss', 'Becker-Raynor'],
            [5, 'ipsa.aut@gmail.com', 'Ms. Antonietta Kozey Jr.'],
        ];
        $table = new Table($headers, $rows);
        echo $table->render();

8,
    8.1,base Encore\Admin\Auth\Permission
        class UserController extends Controller
        {
            public function __construct()
            {
                Permission::check('user');                  // Check permissions, the role of the user permissions can be accessed
                Permission::allow(['editor', 'developer']); // 'editor' and 'developer' role can be accessed
                Permission::deny(['editor', 'developer']);  // 'editor' and 'developer' role are denied
            }
        }
    8.2,user
        Get current user object:        Admin::user();
        Get current user id:            Admin::user()->id;
        Get user's roles:               Admin::user()->roles;
        Get user's permissions:         Admin::user()->permissions;
        User is role:                   Admin::user()->isRole('developer');
        User has permission:            Admin::user()->can('create-post');
        User don't has permission:      Admin::user()->cannot('delete-post');
        Is user super administrator:    Admin::user()->isAdministrator();
        Is user in one of roles:        Admin::user()->inRoles(['editor', 'developer']);
    8.3,Permission middleware
        Route::group([
            // Allow roles `administrator` and `editor` access the routes under group.
            'middleware' => 'admin.permission:allow,administrator,editor',
            // Deny roles `developer` and `operator` access the routes under group.
            'middleware' => 'admin.permission:deny,developer,operator',
            // User has permission `edit-post`、`create-post` and `delete-post` can access routes under group.
            'middleware' => 'admin.permission:check,edit-post,create-post,delete-post',
        ], function ($router) {
            $router->resource('users', UserController::class);
            ...
        });

