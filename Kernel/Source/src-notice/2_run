
run 运行过程

1，PHP程序生命周期
    1.1,单进程PHP[CLI/CGI模式]生命周期
        输入，初始化
            PHP初始化:
                初始化若干全局变量,常量
                初始化Zend引擎和核心组件
                解析php.ini:
                    php_init_config函数(php-src/main/php_ini.c):
                全局操作函数的初始化,e.g:$_GET、$_POST、$_FILES等,
                    php_startup_auto_globals函数(php-src/main/php_variables.c):
                    php_startup_sapi_content_types函数(php-src/main/php_content_type.c):
            初始化静态构建的模块和共享模块(MINIT)(内置模块 /ext/standard/目录)
                php_register_internal_extensions_func函数,
                php_register_extensions函数,(php-src/main/main.c)
                zend_startup_modules函数,(php-src/Zend/zend_API.c)
            模块初始化阶段（MINIT）,模块初始化宏:
                PHP_MINIT_FUNCTION(myPhpExtension) { // 注册常量或者类等初始化操作 }
            禁用函数和类
                php_disable_functions函数(php-src/main/main.c)
                php_disable_classes函数
                php_request_startup
            激活Zend引擎
                gc_reset函数用来重置垃圾收集机制
                init_compiler函数用来初始化编译器
                init_executor函数用来初始化中间代码执行过程
            激活SAPI
                sapi_activate函数用来初始化SG(sapi_headers)和SG(request_info)，
                sapi_module.default_post_reader -> php_default_post_reader函数,处理请求数据
                sapi_module.read_cookies读取cookie
            环境初始化
                php_default_treat_data函数,初始化 $_POST、$_GET、$_COOKIE、$_SERVER
            模块请求初始化
                zend_activate_modules函数，调用其RINIT宏
            模块激活阶段（RINIT），模块激活宏:
                PHP_RINIT_FUNCTION(myPhpExtension) { // 例如记录请求开始时间
                    // 随后在请求结束的时候记录结束时间。这样我们就能够记录下处理请求所花费的时间了 }
        运行
            执行脚本:
                php_execute_script函数包含了运行PHP脚本的全部过程
                词法分析&语法分析
                    zend_compile_file（compile_file函数）做词法分析、语法分析和中间代码生成操作
                ZendEngine执行
                    zend_execute（execute函数）执行中间代码。
                    execute_ex(zend_execute_data *ex)函数 (php-src/Zend/zend_vm_execute.h):
                    fast_add_function()函数 (php-src/Zend/zend_operators.h 内嵌汇编运行):
                EG(return_value_ptr_ptr)返回结果
        关闭PHP,输出
            调用所有通过register_shutdown_function()注册的函数。
            执行所有可用的__destruct函数。[EG(objects_store)对象池,EG(symbol_table)]
            刷出将所有的输出
            发送HTTP应答头。
            停用模块(RSHUTDOWN，对应RINIT)宏:
                PHP_RSHUTDOWN_FUNCTION(myPhpExtension) { // 例如记录请求结束时间，并把相应的信息写入到日至文件中。 }
            关闭模块(MSHUTDOWN，对应MINIT)。
                PHP_MSHUTDOWN_FUNCTION(myPhpExtension) { return SUCCESS; }
            销毁全局变量表（PG(http_globals)）的变量。
            通过zend_deactivate函数，关闭词法分析器、语法分析器和中间代码执行器。
            调用每个扩展的post-RSHUTDOWN函数。
            关闭SAPI，通过sapi_deactivate销毁SG(sapi_headers)、SG(request_info)等的内容。
            关闭流的包装器、关闭流的过滤器。
            关闭内存管理。
            重新设置最大执行时间
            sapi_flush将最后的内容刷新出去
            zend_shutdown将关闭Zend引擎。
    1.2,多进程PHP生命周期
        Apache fork child php process:
            PHP process 1:              PHP process 2:              ...
                MINIT                       MINIT
                    RINIT                       RINIT
                    Script                      Script
                    RSHUTDOWN                   RSHUTDOWN
                    ...                         ...
                    RINIT                       RINIT
                    Script                      Script
                    RSHUTDOWN                   RSHUTDOWN
                    ...                         ...
                MSHUTDOWN                   MSHUTDOWN
    1.3,多线程PHP生命周期
        PHP process 1:
            MINIT
                Thread1:                Thread2:                    ...
                    RINIT                       RINIT
                    Script                      Script
                    RSHUTDOWN                   RSHUTDOWN
                    ...                         ...
            MSHUTDOWN
2, SAPI(Server Application Programming Interface)
    2.1, SAPI实现 (php-src/sapi/)
        cli
        fpm
        CGI/FASTCGI
        Apache
        embed ( 嵌入式 )
    2.1, SAPI 结构
        cgi_sapi_module.startup(&cgi_sapi_module)           //  cgi模式 cgi/cgi_main.c文件
        apache2_sapi_module.startup(&apache2_sapi_module);  //  apache2服务器  apache2handler/sapi_apache2.c文件
        struct _sapi_module_struct {
            char *name;         //  名字（标识用）
            char *pretty_name;  //  更好理解的名字（自己翻译的）

            int (*startup)(struct _sapi_module_struct *sapi_module);    //  启动函数,SAPI初始化时调用,服务器处理多个请求时，该函数只会调用一次。
            int (*shutdown)(struct _sapi_module_struct *sapi_module);   //  关闭方法,释放所有的SAPI的数据结构、内存等。

            int (*activate)(TSRMLS_D);      // 激活, 此函数会在每个请求开始时调用，它会再次初始化每个请求前的数据结构。
            int (*deactivate)(TSRMLS_D);    // 停用, 此函数会在每个请求结束时调用，它用来确保所有的数据都，以及释放在activate中初始化的数据结构。

            int (*ub_write)(const char *str, unsigned int str_length TSRMLS_DC); //  不缓存的写操作(unbuffered write),将PHP的数据输出给客户端
                // 在CLI模式下，其最终是调用fwrite实现向标准输出输出内容；在Apache模块中，它最终是调用Apache提供的方法rwrite。
            void (*flush)(void *server_context);    //  flush 刷新输出，
                // 在CLI模式下通过使用C语言的库函数fflush实现，在php_mode5模式下，使用Apache的提供的函数函数rflush实现。
            struct stat *(*get_stat)(TSRMLS_D);     //  get uid
            char *(*getenv)(char *name, size_t name_len TSRMLS_DC); //  getenv
            void (*sapi_error)(int type, const char *error_msg, ...);   // 报告错误用，大多数的SAPI都是使用的PHP的默认实现php_error。
            int (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC);   /* header handler */
             /* send headers handler */
            int (*send_headers)(sapi_headers_struct *sapi_headers TSRMLS_DC);
            void (*send_header)(sapi_header_struct *sapi_header, void *server_context TSRMLS_DC);   // 发送头部信息，
                // 此方法一般的SAPI都会定制，其所不同的是，有些的会调服务器自带的（如Apache），有些的需要你自己实现（如 FastCGI）。
            int (*read_post)(char *buffer, uint count_bytes TSRMLS_DC); // 在SAPI激活时调用，它与请求的方法相关，
                // 当请求的方法是POST时，程序会操作$_POST、$HTTP_RAW_POST_DATA等变量。
            char *(*read_cookies)(TSRMLS_D);    // 在SAPI激活时，程序会调用此函数，并且将此函数获取的值赋值给SG(request_info).cookie_data。
                // 在CLI模式下，此函数会返回NULL。
            /* register server variables */
            void (*register_server_variables)(zval *track_vars_array TSRMLS_DC);

            void (*log_message)(char *message);     /* Log message */
            time_t (*get_request_time)(TSRMLS_D);   /* Request Time */
            void (*terminate_process)(TSRMLS_D);    /* Child Terminate */

            char *php_ini_path_override;    //  覆盖的ini路径
            ...
        };
